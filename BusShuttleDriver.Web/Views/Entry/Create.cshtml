@model BusShuttleDriver.Web.ViewModels.EntryViewModel

@{
    ViewData["Title"] = "Route Entry";
}

<h1>@ViewData["Title"]</h1>

<form asp-action="SubmitEntry" method="post" class="entry-form" id="entryForm">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <!-- Stop Selector -->
    <div class="form-group">
        <label asp-for="SelectedStopId" class="control-label">Current Stop</label>
        <select asp-for="SelectedStopId" asp-items="Model.AvailableStops" class="form-control form-control-lg"
            onchange="autoAdvance()">
        </select>
    </div>

    <!-- Number Boarded -->
    <div class="form-group">
        <label asp-for="Boarded" class="control-label">Number Boarded</label>
        <input asp-for="Boarded" class="form-control form-control-lg" />
        <span asp-validation-for="Boarded" class="text-danger"></span>
    </div>

    <!-- Number Left Behind -->
    <div class="form-group">
        <label asp-for="LeftBehind" class="control-label">Number Left Behind</label>
        <input asp-for="LeftBehind" class="form-control form-control-lg" />
        <span asp-validation-for="LeftBehind" class="text-danger"></span>
    </div>

    <!-- Submit Button -->
    <div class="form-group">
        <button type="submit" class="btn btn-primary btn-lg">Submit</button>
    </div>
</form>

<!-- End Route Button appears after the last stop is completed -->
<button type="button" class="btn btn-danger btn-lg" id="endRouteBtn" style="display:none;">End Route</button>

<script>
    document.getElementById('entryForm').addEventListener('submit', function (e) {
        e.preventDefault();  // Prevent the normal form submission

        const formData = new FormData(this);

        fetch('@Url.Action("SubmitEntry", "Entry")', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'  // For ASP.NET Core to recognize AJAX request
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    autoAdvance();
                } else {
                    alert('Failed to save entry. ' + data.message);  // Provide more specific error message from server
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred. Please try again.');
            });
    });

    function autoAdvance() {
        var select = document.getElementById('SelectedStopId');
        if (select.selectedIndex < select.options.length - 1) {
            select.selectedIndex++;  // Move to next stop
        } else {
            // Last stop, show End Route button
            document.getElementById('endRouteBtn').style.display = 'block';
        }
    }

</script>


<style>
    .entry-form .form-row {
        display: flex;
        flex-wrap: wrap;
    }

    .entry-form .form-group {
        flex: 1;
        /* Allows each input to take equal space */
        min-width: 250px;
        /* Ensures that the form does not collapse in narrow views */
    }

    .form-control-lg {
        font-size: 1.25rem;
        /* Larger font size for inputs */
        height: calc(1.5em + 1rem + 2px);
        /* Larger height for inputs */
    }

    .btn-lg {
        padding: .5rem 1rem;
        font-size: 1.25rem;
        line-height: 1.5;
        border-radius: .3rem;
    }
</style>